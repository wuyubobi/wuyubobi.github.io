<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>ZB Blog</title>
    <description>Android开发 | wuyubobi，Android工程师，开发，数据，Java，旅游| 这里是 @wuyubobi 的个人博客，努力成为一个大牛。</description>
    <link>http://localhost:4000/</link>
    <atom:link href="http://localhost:4000/feed.xml" rel="self" type="application/rss+xml" />
    <pubDate>Fri, 16 Jun 2017 00:09:10 +0800</pubDate>
    <lastBuildDate>Fri, 16 Jun 2017 00:09:10 +0800</lastBuildDate>
    <generator>Jekyll v3.4.3</generator>
    
      <item>
        <title>GitFlow工作流</title>
        <description>&lt;h3 id=&quot;git-flow-的安装&quot;&gt;Git Flow 的安装&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;OSX  —&amp;gt;  brew install git-flow&lt;/li&gt;
  &lt;li&gt;Linux —&amp;gt; apt-get install git-flow&lt;/li&gt;
  &lt;li&gt;Windows —&amp;gt; &lt;a href=&quot;https://github.com/nvie/gitflow/wiki/Windows&quot;&gt;Window安装Git Flow&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;em&gt;Git Flow的使用方式&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://op0s30etn.bkt.clouddn.com/o_git-flow-commands.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h3 id=&quot;gitflow的工作方式&quot;&gt;GitFlow的工作方式&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;http://op0s30etn.bkt.clouddn.com/git-workflow-release-cycle-4maintenance.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;strong&gt;Feature分支&lt;/strong&gt; 
功能分支，每一个新功能都位与一个独立分支，功能分支是使用develop分支作为父分支，新功能完成时，合并会develop分支，不予master分支交互。&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Master分支&lt;/strong&gt; 
这个分支最近发布到生产环境的代码，最近发布的Release， 这个分支只能从其他分支合并，不能在这个分支直接修改。&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Develop分支&lt;/strong&gt; 
这个分支是我们是我们的主开发分支，包含所有要发布到下一个Release的代码，这个主要合并与其他分支，比如Feature分支&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Release分支&lt;/strong&gt;
当你需要一个发布一个新Release的时候，我们基于Develop分支创建一个Release分支，完成Release后，我们合并到Master和Develop分支。&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Hotfix分支&lt;/strong&gt;
当我们在Master发现新的Bug时候，我们需要创建一个Hotfix, 完成Hotfix后，我们合并回Master和Develop分支，所以Hotfix的改动会进入下一个Release&lt;/li&gt;
&lt;/ol&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;em&gt;创建develop分支：&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;git branch develop （创建分支）&lt;/li&gt;
  &lt;li&gt;git push -u origin develop （将分支提交到远程仓库）&lt;/li&gt;
  &lt;li&gt;git clone …(仓库地址)&lt;/li&gt;
  &lt;li&gt;git checkout -b develop origin/develop （切换到develop分支）&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;em&gt;开发新功能&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;git checkout -b some-feature（新功能分支名） develop (基于develop分支创建并切换到该分支）&lt;/li&gt;
  &lt;li&gt;git status （查看变化）&lt;/li&gt;
  &lt;li&gt;git add .  （添加）&lt;/li&gt;
  &lt;li&gt;git commit -m ‘’  （提交）&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;git flow feature（默认创建的新功能分支名）start  some-feature（新功能分支名）使用git flow 快速完成操作
git flow feature publish some-feature 推到远端服务器
git flow feature pull origin some-feature 取到其他客户发布的新特性分支&lt;/p&gt;
&lt;/blockquote&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;em&gt;完成新功能&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;git pull origin develop （拉远程develop代码）&lt;/li&gt;
  &lt;li&gt;git checkout develop  （切换到develop分支）&lt;/li&gt;
  &lt;li&gt;git merge some-feature （将新功能和develop分支进行合并）&lt;/li&gt;
  &lt;li&gt;git push（提交到远程服务器）&lt;/li&gt;
  &lt;li&gt;git branch -d some-feature （删掉了新工能的分支）&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;git flow feature finish some-feature&lt;/p&gt;
&lt;/blockquote&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;em&gt;准备发布&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;git checkout -b release-v1.0.0（准备发布的版本） develop&lt;/li&gt;
  &lt;li&gt;git flow release start  release-v1.0.0 （从develop分支中开始创建master）&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;git flow release publish release-v1.0.0 （推到远端服务器）&lt;/p&gt;
&lt;/blockquote&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;em&gt;完成release版本&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;git checkout master （切换分支）&lt;/li&gt;
  &lt;li&gt;git merge release-v1.0.0 （合并发布的release-v1.0.0版本）&lt;/li&gt;
  &lt;li&gt;git push （提交远端）&lt;/li&gt;
  &lt;li&gt;git checkout develop （切换develop分支）&lt;/li&gt;
  &lt;li&gt;git merge release-v1.0.0（合并发布的release-v1.0.0版本）&lt;/li&gt;
  &lt;li&gt;git push （提交远端）&lt;/li&gt;
  &lt;li&gt;git branch -d release-v1.0.0 （删除release分支）&lt;/li&gt;
  &lt;li&gt;git tag -a v1.0.0 -m “” master （打tag）&lt;/li&gt;
  &lt;li&gt;git push –tags （提交tag）&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;git flow release finish release-v1.0.0&lt;/p&gt;
&lt;/blockquote&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;em&gt;修复线上bug&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;git checkout -b issue-#001 master （基于master创建修复分支）&lt;/li&gt;
  &lt;li&gt;Fix the bug （修复bug）&lt;/li&gt;
  &lt;li&gt;git checkout master （切换master分支）&lt;/li&gt;
  &lt;li&gt;git merge issue-#001 （合并修复）&lt;/li&gt;
  &lt;li&gt;git push （提交）&lt;/li&gt;
  &lt;li&gt;git checkout develop （切换develop分支）&lt;/li&gt;
  &lt;li&gt;git merge issue-#001 （合并修复）&lt;/li&gt;
  &lt;li&gt;git push （提交）&lt;/li&gt;
  &lt;li&gt;git branch -d issue-#001 （删除修复分支）&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;git flow hotfix start VERSION [BASENAME] VERSION 参数标记着修正版本。你可以从 [BASENAME]开始，[BASENAME]为finish release时填写的版本号
git flow hotfix finish VERSION&lt;/p&gt;
&lt;/blockquote&gt;

</description>
        <pubDate>Thu, 15 Jun 2017 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2017/06/15/Git%E5%B7%A5%E4%BD%9C%E6%B5%81/</link>
        <guid isPermaLink="true">http://localhost:4000/2017/06/15/Git%E5%B7%A5%E4%BD%9C%E6%B5%81/</guid>
        
        <category>Git</category>
        
        <category>GitFlow</category>
        
        <category>项目管理</category>
        
        <category>代码管理</category>
        
        
      </item>
    
      <item>
        <title>思考的笔记</title>
        <description>&lt;p&gt;&lt;strong&gt;对抗35岁&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;提前预警，未来五年一定会面临的事&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;城市与家乡（房、车、钱、环境）&lt;/li&gt;
      &lt;li&gt;行业跑道 （换行，坚持）&lt;/li&gt;
      &lt;li&gt;公司还是老板 （平台）&lt;/li&gt;
      &lt;li&gt;身体 （健康状态）&lt;/li&gt;
    &lt;/ul&gt;

    &lt;p&gt;提前5年、10年、提早开始建立自己的职场壁垒，防御墙，尽早成为这家公司，这个行业，这个大领域里，无可取代的人。&lt;/p&gt;

    &lt;p&gt;虽然，很少有人能够做到无可取代，但至少要努力 让着中让这种取代成本变得更高一点。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;不和趋势作对，选择比努力更重要&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;弯道超车&lt;/li&gt;
    &lt;/ul&gt;

    &lt;p&gt;弯道超车是什么，就是在大多数竞争者还没有发现机会的时候，你已经跳进去了。那些一开始不理解你的人，等看清楚整个局，已经彻底没有机会追上你了。&lt;/p&gt;

    &lt;p&gt;万事不必坐等十拿九稳，说跳就跳了，万一成功了呢，乘风破浪，绝不是原地努力得出来的。这种机会，除了嗅觉，90%靠勇。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;建壁垒，越高越好&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;30岁以后靠的都不是死努力 （人无我有）&lt;/li&gt;
      &lt;li&gt;提早十年开始规划自己成为一个复合型人才 （成为一个超级问题解决专家）&lt;/li&gt;
      &lt;li&gt;尊重自己的真实欲望&lt;/li&gt;
    &lt;/ul&gt;

    &lt;p&gt;不要放弃任何学习的机会，不要计较多做一点份外事，多帮一点没有利益的忙，多交一些跨领域的朋友，多听听外面的信息。给30岁后的自己积累“财富”。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;提高生活的品质&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;打造温暖的家&lt;/li&gt;
  &lt;li&gt;学会做饭，好好吃饭&lt;/li&gt;
  &lt;li&gt;好好睡觉&lt;/li&gt;
  &lt;li&gt;保持活力&lt;/li&gt;
  &lt;li&gt;努力学习改变生活&lt;/li&gt;
  &lt;li&gt;记录生活，规划人生&lt;/li&gt;
  &lt;li&gt;给家里添加生气&lt;/li&gt;
  &lt;li&gt;丰富自己的社交圈&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;善良&lt;/em&gt;&lt;/strong&gt;
&lt;strong&gt;&lt;em&gt;情商&lt;/em&gt;&lt;/strong&gt;
&lt;strong&gt;&lt;em&gt;人品&lt;/em&gt;&lt;/strong&gt;
&lt;strong&gt;&lt;em&gt;不要做自己不擅长的事&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

</description>
        <pubDate>Mon, 01 May 2017 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2017/05/01/%E6%80%9D%E7%BB%B4%E7%AC%94%E8%AE%B0/</link>
        <guid isPermaLink="true">http://localhost:4000/2017/05/01/%E6%80%9D%E7%BB%B4%E7%AC%94%E8%AE%B0/</guid>
        
        <category>思考</category>
        
        <category>职场</category>
        
        <category>未来</category>
        
        
      </item>
    
      <item>
        <title>做CEO要避免理性的自负</title>
        <description>&lt;p&gt;&lt;strong&gt;以下是张一鸣演讲全文：&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;去年的年会，我讲了要尽可能招优秀的人。把优秀的人聚集起来之后，该怎么做事情呢。这是我今年想分享的内容。怎么建立一个有效的组织，怎么在公司从小变大的过程中，应对管理上面临的挑战。这也是今日头条在成长过程中，我们常常讨论和思考的问题。现在，我们倾向于“Context，not Control”的解决方案。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;打个比方，来解释Context和Control的区别。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;计算机有两种处理任务的方式：一种是超级计算机，用一台计算机处理很密集的任务；一种是分布式的运算，让很多机器共同来处理任务，把任务分解，把任务所需要的资源分解。有两种企业管理的模式分别跟这两种运算方式类似。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://op0s30etn.bkt.clouddn.com/image/jpg/1.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;第一种，把CEO当成超级计算机&lt;/strong&gt;，CEO做战略设计，提出战略计划，逐层分解之后执行，执行的过程中如果遇到情况，会再往上汇报，CEO汇总信息，再次定出工作任务，这个过程中有审批、有流程，有很多的管理机制。过去很多企业都是采取这样的方式，主要包括：建构战略和控制流程。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;第二种，有更多的人参与决策&lt;/strong&gt;，让更多的想法自下往上涌现出来，而不是一个从上到下的战略分解，这个过程中需要更多人基于上下文Context做出判断，而不是根据指令来执行。&lt;/p&gt;

&lt;p&gt;具体来讲，什么是Context，什么是Control。&lt;/p&gt;

&lt;p&gt;Context是指决策所需要的信息集合，包括原理是什么，市场环境如何，整个行业格局如何，优先级是什么，需要做到什么程度，以及业务数据和财务数据等等。&lt;/p&gt;

&lt;p&gt;Control则包括了委员会、指令、分解和汇总、流程、审批等等。&lt;/p&gt;

&lt;p&gt;为什么我们倾向于“Context，not Control”呢?&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://op0s30etn.bkt.clouddn.com/image/jpg/2.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;在我们看来，Control往往会带来一些危险。人类在判断自己的理性控制能力时会有一种幻觉，对于聪明理性的人更是如此，常抱有理性的自负。&lt;strong&gt;CEO们往往有过成功的经验，尤其在公司早期成功过，且CEO没有上级，很少被人challenge，容易觉得自己英明神武。&lt;/strong&gt;但是大家忽视了一点，行业是不断发展的，你所具有的知识虽然丰富，但在行业不断变化中依旧是有限的。&lt;/p&gt;

&lt;p&gt;有时候，CEO们会误以为，自己提出的方法论特别好，模型特别优雅，希望把它执行，或者在全公司大范围内推行，但忽略了抽象知识和具体形式之间有差距。理性往往只适合做知识抽象，对具体问题的解决，不一定真的有帮助。当然我们并不要否定理性的作用，只是要避免过度放大理性的会带来的危险。&lt;/p&gt;

&lt;p&gt;自上而下的宏大战略往往都是灾难，业界也发生过不少真实的例子。&lt;/p&gt;

&lt;p&gt;比如windows vista，这个项目是比尔盖茨按自己技术理念力推的，提了一系列的宏大理念，计划2003年上线，这些理论听起来都非常好，非常领先，但是一直到2006年才真正上线，中间还重构了一次，把目标降低，重新修改了计划，最终才把Vista推出去。&lt;/p&gt;

&lt;p&gt;乔布斯也犯过同样的错误。第一次离开苹果做NeXT的时候，他提出一个非常理想的做计算机的模式，包括优雅的操作系统，完全面向对象（Object Oriented）的语言，但是最终也没有卖出多少台。中国也有这样的例子，曾经盛大易宝的理念也很宏大，但在和当时无论是文娱行业、互联网带宽，还是政策环境的情况都不匹配，所以最后失败。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://op0s30etn.bkt.clouddn.com/image/jpg/3.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Control除了会带来战略上的问题，还会因为追求控制感而导致企业反应迟钝。&lt;/strong&gt;在座的都是CEO，我们可以把支出、合同、offer，全部加起来算算每天的审批有多少。假设一天是15个的话，一年就是5000多个。这其中真正有效的有多少，经过大家认真思考的有多少？还是它的存在纯粹基于控制感？好像做了支出审批，资金就不会被乱使用。&lt;/p&gt;

&lt;p&gt;相较而言，你的下属或者其他人是不是能够更好地审批？我想是的，因为他们在一线决策，有更充分的外部信息。由于CEO精力有限，大量的审批延时，让很多事情平白增加了一天到两天的时长。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://op0s30etn.bkt.clouddn.com/image/jpg/4.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;针对公司变大后，会出现的这些问题，有一种错误的解决方案——过早BU化。&lt;/p&gt;

&lt;p&gt;但这种方案会导致几个问题：&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;第一，部门间不配合。&lt;/strong&gt;比如说，BU自己处理PR危机，自己招工程师，就不用找市场或技术同事了，部门之间就不用配合，或者说会导致配合变得更差了，因为不花心思磨合了。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;第二，部门内冗余，专业度变差。&lt;/strong&gt;比如说，单个BU招的工程师标准不够高，而且工程师团队规模不够大，互相学习不够，进步提升不够，专业程度变差，内部也变冗余。对于CEO来说，感觉更像承包者，我把这个任务发出去了，你自己做吧，我不参与过程，我只要结果。长此以往，企业文化就变差了。&lt;/p&gt;

&lt;p&gt;当然有一些例外，如果是相对独立或非常成熟的业务，确实不需要公司内部支持和配合，可以BU化。公司存在的意义就是为了分工和配合，公司内的业务活动，要确保内部合作合作成本是要低于市场交易成本的，大量不配合的BU，本质就不应该存在在这个企业内部。过早BU化是一种比较普遍的错误解决方案。很多公司过早就成立了很多子公司，或者拆成很多项目组，甚至更进一步把业务独立出去，独立融资。在我看来，往往都不是很好的解决方案，而是懒惰的解决方案，如此就不用解决配合和沟通问题了。&lt;/p&gt;

&lt;p&gt;相比Control，强调Context的管理模式有什么好处？&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://op0s30etn.bkt.clouddn.com/image/jpg/5.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;第一，分布式运算，让更多人用更多CPU进行运算，让更多人参与决策，利用集体的智慧。作为管理层，你做审批决策只花30秒，但别人可以花三个小时，做更多的调研之后才判断。&lt;/p&gt;

  &lt;p&gt;第二，可以更快速地执行。不需要层层汇总，不需要汇总到一处，不需要在CEO这里排队列，能够更及时地响应。&lt;/p&gt;

  &lt;p&gt;第三，充分的外部信息输入。在Control的模式中，任何信息都要到CEO这个节点，靠CEO再分发出去。CEO很大程度变成了公司和外部之间的接口。相比单靠CEO接触外界情况，了解市场行业或者宏观经济，让更多的同事，更多主管直接面向行业，信息肯定会更充分，角度也不一样。&lt;/p&gt;

  &lt;p&gt;第四，参与感激发创造力。做同样的事情，如果员工知其然，也知其所以然，会比只知道指令，做起来更有意思。这个对于发挥员工创造力是有帮助的。&lt;/p&gt;

  &lt;p&gt;第五，可规模化。Context的建设，表现形式可能是内部的系统，可能是知识共享文档，这些都是可以复用的，是可规模化的。而CEO和管理团队的时间精力是有瓶颈，靠拼体力、脑力、耐力来解决，是有瓶颈的，是没有规模效应的。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;当然，有时候也需要Control：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://op0s30etn.bkt.clouddn.com/image/jpg/6.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;一、紧急情况和重点项目。比如说重大的PR危机需要快速响应。重点项目也是如此，如果竞争对手已经逼进，这个时候进行分布式的讨论，自下而上的涌现，来不及解决问题，时间窗口很快就过去了，所以紧急情况和处理重点项目需要Control。&lt;/p&gt;

  &lt;p&gt;二、创新业务和新部门的早期。如果一个部门新设立，或者一个新高管上任，还没有跟公司磨合好，这个时候需要Control。创新业务早期，需要更多支持配备资源的时候，也需要CEO的统一协调，主导进展。&lt;/p&gt;

  &lt;p&gt;三、不匹配的职位安排。某个岗位的人跟公司理念差距很大，那么他的上级也是需要Control来干预的。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;为什么公司发展一段时间后会出现这个问题，而公司早期不会出现？&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://op0s30etn.bkt.clouddn.com/image/jpg/7.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;因为在公司早期的时候，CEO一般都是业务的专家。公司业务简单，行业情况简单，CEO自己做决策就可以了，这样效率高。但随着公司的成长，CEO精力被很多事情分散，PR、融资、外部活动等等，组织本身也非常消耗管理者精力。另外，环境变复杂，业务多元化，CEO不再是专家，甚至对业务也不是最灵敏的人了。&lt;/p&gt;

&lt;p&gt;我们要求CEO快速学习成长，超级计算机变得越来越强，知识面越来越广，但是人的精力总是有限，总有很多方面是不如创业阶段的时候。比尔盖茨20年前是一个优秀的架构师，20多年之后，还是要用他的理念来指导整个的大型项目，作用就非常有限了。当然有些企业不存在这样的问题，因为他们所处的行业稳定，创新较少，遵守好传统的流程就可以了，比如说老干妈辣酱。&lt;/p&gt;

&lt;p&gt;总结而言，我们认为好的组织包括：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://op0s30etn.bkt.clouddn.com/image/jpg/8.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;一，优秀的人。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;需要分布式的处理器，不只是一个执行者，每一台分布式计算机都有判断能力，都要聪明。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;二，“充分Context，少量Control”的管理模式。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;每个人有他需要扮演的角色，掌握所有的上下文信息，做出业务决策。在必要的时候，做出少量的干预。&lt;/p&gt;

&lt;p&gt;有了以上两点，就能保证组织内的交易成本最小，并且做出高质量的决策。&lt;/p&gt;

&lt;p&gt;基于这个理念，在我们公司，遇到问题的时候，往往习惯先问Context是不是不够充分，而不是增加Control。&lt;/p&gt;

&lt;p&gt;比如说某项进展出了问题，我们首先不考虑让更高阶的人来做，而是反过来想，是不是Context不够，是不是没有把行业的情况、业务数据、过去的失败案例分享给他。&lt;/p&gt;

&lt;p&gt;作为管理者，要想想你作出比他人更好的决策，是因为能力还是你的context更充分，是不是存在信息不对称？大家仔细观察会发现，有时管理者甚至利用信息不对称来体现自己的价值。所以，在公司内首先要把建设Context这个基础工程做好了，然而这并不容易，需要大量的沟通、管理和产品技术工作。&lt;/p&gt;

&lt;p&gt;从具体操作层面，我们做了一些实践，分享给大家：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://op0s30etn.bkt.clouddn.com/image/jpg/9.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;第一，减少规则和审批。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;不允许部门随便出规定，即便不得不有规则，我们也希望规则非常简单，不允许有长达几页纸，非常难执行的规定。要减少审批，甚至希望尽量不要审批。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;第二，组织结构灵活，拒绝领地意识，能灵活调整汇报关系。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;让大家意识到，汇报关系只是汇总信息一种方式，只要业务需要就可以随时调整。&lt;/p&gt;

&lt;p&gt;如果我们有一个项目非常重要，我们可能需要市场部的同事都支持这个项目，那在这段时间里，这个项目的主管也是市场部同事的主管。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;第三，弱化层级跟title。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;我们鼓励年轻人多提想法。我第一次担任CEO是26岁，我相信我们公司26岁的人有很好的实践经验，受过很好的教育，只要给他们好的context，他们也能做出好的决策。为了避免形式感给基层节点带来压制，我们弱化层级，首先是不允许这种称呼——“老大”、“某某总”、“老师”，这种称呼一旦出来之后，很多想法就不能涌现出来了。他们可能会倾向于先听听“老师”有什么意见，自己不能先说出来。&lt;/p&gt;

&lt;p&gt;我们没有title带来的日常可见的待遇区别，比如什么样的人配备什么样的电脑，什么样的人配备什么样的办公桌，这样也会带来层级感，也会影响不同的同事发表意见。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;第四，我们鼓励内部信息透明。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;我们鼓励群聊，各部门之间充分沟通，不要只跟CEO沟通。也不提倡一对一的沟通，我们认为一对一的沟通效率很低。如果有新加入的同事或者高管希望跟我一对一的沟通，我经常会说你可以抄送给我，但你首先发给其他人，发给需要和你配合的人。&lt;/p&gt;

&lt;p&gt;我们让管理层的OKR对下属员工保持公开，让大家知道你在做什么，为什么在做这个事情，其他部门的人在做什么。OKR的制定过程也不是自上而下的分解，而是大家互相之间自己对齐。看一下上级的OKR，看一下别的部门的OKR，看一下同级的OKR，了解目前公司最重要的任务是什么，这个季度最重要的任务是什么，我做什么能够帮助他们。季度会也是尽量让相关人多参与，并不是一个非常小范围的高管会。我们还会经常举办CEO面对面，在这个会上回答员工提问，让大家了解公司进展。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;第五，我们认为做到充分建立context，需要好的内部系统做支持。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;我们有将近100个人内部工具开发团队，做各种工具尝试。比如我们自己开发了OKR系统，并且和内部使用的IM打通，方便大家互相查看。&lt;/p&gt;

&lt;p&gt;这些基础工具，第一可以让人更轻松，第二可以规模化。新人加入公司，很快能适应OKR系统，很快可以看到内部的资料，从内部获取信息。他也能意识到，他不仅仅有获得信息的权利，也有支持相关工作的责任。这样的实践，在我们看来，是把公司当成产品来建设，让公司内部的context更有效，让这个系统分布式处理能力更强。&lt;/p&gt;
</description>
        <pubDate>Wed, 26 Apr 2017 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2017/04/26/CEO/</link>
        <guid isPermaLink="true">http://localhost:4000/2017/04/26/CEO/</guid>
        
        <category>转载</category>
        
        <category>管理</category>
        
        
      </item>
    
  </channel>
</rss>
